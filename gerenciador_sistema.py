# ============================================================================
# CORRE√á√ÉO COMPLETA DA AUTENTICA√á√ÉO WAHA
# ============================================================================
# Baseado na documenta√ß√£o oficial: https://waha.devlike.pro/docs/how-to/security/
#
# REGRA FUNDAMENTAL DO WAHA:
# - Container: Pode usar plain text OU SHA512 hashed na vari√°vel WAHA_API_KEY
# - HTTP Requests: SEMPRE usar a chave plain text original no header X-Api-Key
#
# ============================================================================

# ===== ARQUIVO 1: gerenciador_sistema.py (CORRIGIDO) =====

import asyncio
import subprocess
import sys
import os
import time
import secrets
import string
import requests
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
import logging
from dotenv import load_dotenv, set_key

class GerenciadorWAHA:
    """
    Gerenciador WAHA com autentica√ß√£o CORRIGIDA segundo a documenta√ß√£o oficial.
    
    CORRE√á√ÉO PRINCIPAL:
    - Container: Usa plain text API key (mais simples e compat√≠vel)
    - HTTP Requests: Usa a mesma plain text API key
    - Remove toda a complexidade desnecess√°ria de hashing
    
    Attributes:
        api_key: API key em plain text (usada tanto no container quanto nas requisi√ß√µes)
        comando_base: Comando Docker com configura√ß√£o correta
        processo: Processo do container em execu√ß√£o
    """
    
    def __init__(self):
        """
        Inicializa o gerenciador WAHA com autentica√ß√£o simplificada e correta.
        
        Examples:
            >>> waha = GerenciadorWAHA()
            >>> print(len(waha.api_key))
            32
        """
        load_dotenv()

        # CORRE√á√ÉO: Usar apenas uma API key simples (plain text)
        self.api_key = os.getenv("WAHA_API_KEY")
        
        # Se n√£o existe ou √© inv√°lida, gerar nova
        if not self.api_key or self.api_key.startswith("sha512:") or len(self.api_key) < 16:
            self._gerar_nova_api_key()

        # COMANDO DOCKER CORRETO: Usar plain text API key
        self.comando_base = [
            "docker", "run", "-it", "--rm",
            "-p", "127.0.0.1:3000:3000",
            "-e", f"WAHA_API_KEY={self.api_key}",  # Plain text para o container
            "-e", "WHATSAPP_DEFAULT_ENGINE=WEBJS",
            "-e", "WAHA_PRINT_QR=true",
            "-e", "WAHA_API_KEY_EXCLUDE_PATH=health,ping,version",  # Excluir endpoints de monitoramento
            "--name", "waha-bot",
            "devlikeapro/waha:latest"
        ]
        self.processo = None
        
        print(f"‚úÖ WAHA configurado com API key: {self.api_key[:8]}...")
        
    def _gerar_nova_api_key(self) -> None:
        """
        Gera nova API key seguindo as melhores pr√°ticas do WAHA.
        
        CORRE√á√ÉO: Gera apenas plain text, sem hashing desnecess√°rio.
        
        Examples:
            >>> waha = GerenciadorWAHA()
            >>> waha._gerar_nova_api_key()
            >>> print(len(waha.api_key))
            32
        """
        # Gerar chave segura de 32 caracteres (UUID sem h√≠fens)
        import uuid
        self.api_key = str(uuid.uuid4()).replace('-', '')
        
        # Salvar no .env
        env_path = Path(".env")
        set_key(str(env_path), "WAHA_API_KEY", self.api_key)
        
        # Remover vari√°veis antigas se existirem
        if os.getenv("WAHA_API_KEY_RAW"):
            set_key(str(env_path), "WAHA_API_KEY_RAW", "")
        
        # Atualizar ambiente atual
        os.environ["WAHA_API_KEY"] = self.api_key
        
        print(f"üîë Nova API key gerada: {self.api_key[:8]}...")
    
    def criar_sessao(self, webhook_url: str) -> bool:
        """
        Cria sess√£o WAHA usando autentica√ß√£o CORRETA.
        
        CORRE√á√ÉO PRINCIPAL: Usa plain text API key no header X-Api-Key,
        conforme especificado na documenta√ß√£o oficial do WAHA.
        
        Args:
            webhook_url: URL do webhook para receber eventos
            
        Returns:
            bool: True se sess√£o foi criada com sucesso
            
        Examples:
            >>> waha = GerenciadorWAHA()
            >>> sucesso = waha.criar_sessao("https://example.ngrok.app/webhook/whatsapp")
            >>> print(sucesso)
            True
        """
        try:
            # CORRE√á√ÉO: Header com plain text API key (documenta√ß√£o oficial)
            headers = {
                "Content-Type": "application/json",
                "X-Api-Key": self.api_key  # SEMPRE plain text para HTTP requests
            }

            print(f"üîê Autenticando com API key: {self.api_key[:8]}...")

            # Remover sess√£o existente se houver
            try:
                delete_response = requests.delete(
                    "http://localhost:3000/api/sessions/default",
                    headers=headers,
                    timeout=10
                )
                print(f"üìù Delete session response: {delete_response.status_code}")
            except Exception as e:
                print(f"‚ÑπÔ∏è  Erro ao deletar sess√£o existente (normal): {e}")

            # Configura√ß√£o da sess√£o otimizada
            session_config = {
                "name": "default",
                "start": True,
                "config": {
                    "metadata": {
                        "user.id": "bot-whatsapp-comercial",
                        "user.email": "bot@comercial-esperanca.com"
                    },
                    "proxy": None,
                    "debug": False,
                    "noweb": {
                        "store": {
                            "enabled": True,
                            "fullSync": False
                        }
                    },
                    "webhooks": [
                        {
                            "url": webhook_url,
                            "events": [
                                "message",
                                "message.reaction", 
                                "session.status",
                                "message.media"
                            ],
                            "hmac": None,
                            "retries": 3,
                            "customHeaders": {
                                "User-Agent": "Bot-WhatsApp-v5.0-Corrected"
                            }
                        }
                    ]
                }
            }

            print(f"üîó Configurando webhook: {webhook_url}")
            
            response = requests.post(
                "http://localhost:3000/api/sessions",
                json=session_config,
                headers=headers,
                timeout=20
            )
            
            print(f"üì° Response status: {response.status_code}")
            
            if response.status_code in [200, 201]:
                data = response.json()
                print("‚úÖ Sess√£o WAHA criada com sucesso!")
                
                # Verificar status da sess√£o
                status = data.get("status", "UNKNOWN")
                if status == "SCAN_QR_CODE":
                    print("üì± QR code dispon√≠vel em http://localhost:3000")
                    print("üì∏ Escaneie com seu WhatsApp para ativar o bot")
                elif status == "WORKING":
                    print("üöÄ Sess√£o j√° autenticada e funcionando!")
                else:
                    print(f"üìä Sess√£o criada com status: {status}")
                
                return True
            else:
                print(f"‚ùå Erro ao criar sess√£o: Status {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"üìù Detalhes do erro: {error_data}")
                    
                    # Debug adicional para erro 401
                    if response.status_code == 401:
                        print("üîç DIAGN√ìSTICO ERRO 401:")
                        print(f"   API Key enviada: {self.api_key[:8]}...")
                        print(f"   Header X-Api-Key: Presente")
                        print(f"   Container API Key: {self.api_key[:8]}...")
                        print("üìö Conforme documenta√ß√£o WAHA: HTTP requests devem usar plain text API key")
                        
                except:
                    print(f"üìù Response text: {response.text}")
                return False
                
        except Exception as e:
            print(f"üí• Erro ao criar sess√£o WAHA: {e}")
            return False
    
    # ... resto dos m√©todos permanecem iguais mas com a API key corrigida ...

# ===== ARQUIVO 2: app/core/cliente_waha.py (CORRIGIDO) =====

import os
import hashlib
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Optional
import httpx
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class ConfiguracaoWaha:
    """Configura√ß√£o WAHA corrigida para autentica√ß√£o simples."""
    base_url: str
    api_key: str  # SEMPRE plain text
    session_name: str
    timeout: int = 30
    max_retries: int = 3
    temp_dir: Path = Path("temp")

class ClienteWaha:
    """
    Cliente WAHA com autentica√ß√£o CORRIGIDA segundo documenta√ß√£o oficial.
    
    PRINCIPAIS CORRE√á√ïES:
    1. Remove toda a complexidade de hash/plain text
    2. Usa apenas plain text API key para tudo
    3. Simplifica o processamento da API key
    4. Segue exatamente a documenta√ß√£o oficial do WAHA
    
    Attributes:
        config: Configura√ß√£o com API key em plain text
        headers: Headers HTTP com X-Api-Key correto
    """
    
    def __init__(self):
        """
        Inicializa cliente WAHA com autentica√ß√£o simplificada e correta.
        
        Examples:
            >>> cliente = ClienteWaha()
            >>> print(cliente.config.api_key[:8])
            # 8 primeiros caracteres da API key
        """
        self._carregar_configuracoes_corrigidas()
        self._configurar_headers_corretos()
        
        # Criar diret√≥rio tempor√°rio
        self.temp_dir = self.config.temp_dir
        self.temp_dir.mkdir(exist_ok=True, parents=True)
        
        logger.info(f"Cliente WAHA inicializado com autentica√ß√£o corrigida")
        logger.info(f"Base URL: {self.config.base_url}")
        logger.info(f"API Key configurada: {'‚úÖ' if self.config.api_key else '‚ùå'}")
        
    def _carregar_configuracoes_corrigidas(self):
        """
        Carrega configura√ß√µes seguindo a documenta√ß√£o oficial do WAHA.
        
        CORRE√á√ÉO: Remove toda a l√≥gica complexa de hashing e usa plain text.
        """
        base_url = os.getenv("WAHA_BASE_URL", "http://localhost:3000")
        session_name = os.getenv("WHATSAPP_SESSION_NAME", "default")
        
        # CORRE√á√ÉO PRINCIPAL: API key sempre em plain text
        api_key = os.getenv("WAHA_API_KEY", "")
        
        # Se a chave est√° no formato SHA512, extrair a original ou gerar nova
        if api_key.startswith("sha512:"):
            logger.warning("API key em formato SHA512 detectada - gerando nova plain text")
            api_key = self._gerar_api_key_plain_text()
            self._salvar_api_key_corrigida(api_key)
        elif not api_key or len(api_key) < 16:
            logger.info("API key n√£o configurada - gerando nova")
            api_key = self._gerar_api_key_plain_text()
            self._salvar_api_key_corrigida(api_key)
        
        self.config = ConfiguracaoWaha(
            base_url=base_url.rstrip("/"),
            api_key=api_key,
            session_name=session_name,
            timeout=int(os.getenv("WAHA_TIMEOUT", "30")),
            max_retries=int(os.getenv("WAHA_MAX_RETRIES", "3")),
            temp_dir=Path(os.getenv("TEMP_DIR", "temp"))
        )
        
        logger.info("Configura√ß√µes WAHA carregadas com autentica√ß√£o corrigida")
    
    def _gerar_api_key_plain_text(self) -> str:
        """
        Gera API key em plain text conforme recomenda√ß√µes WAHA.
        
        Returns:
            str: API key em plain text (UUID sem h√≠fens)
            
        Examples:
            >>> cliente = ClienteWaha()
            >>> key = cliente._gerar_api_key_plain_text()
            >>> print(len(key))
            32
        """
        import uuid
        return str(uuid.uuid4()).replace('-', '')
    
    def _salvar_api_key_corrigida(self, api_key: str):
        """
        Salva API key corrigida no arquivo .env.
        
        Args:
            api_key: API key em plain text para salvar
        """
        try:
            from dotenv import set_key
            env_path = Path(".env")
            set_key(str(env_path), "WAHA_API_KEY", api_key)
            os.environ["WAHA_API_KEY"] = api_key
            logger.info("API key corrigida salva no .env")
        except Exception as e:
            logger.error(f"Erro ao salvar API key: {e}")
    
    def _configurar_headers_corretos(self):
        """
        Configura headers HTTP seguindo documenta√ß√£o oficial WAHA.
        
        CORRE√á√ÉO: X-Api-Key sempre com plain text, nunca hash.
        """
        self.headers = {
            "Content-Type": "application/json",
            "User-Agent": "Bot-WhatsApp-Cliente-Corrected/5.0",
        }
        
        # CORRE√á√ÉO CR√çTICA: X-Api-Key sempre com plain text
        if self.config.api_key:
            self.headers["X-Api-Key"] = self.config.api_key  # SEMPRE plain text
            logger.debug("Headers configurados com X-Api-Key (plain text)")
        else:
            logger.warning("Headers configurados SEM autentica√ß√£o")
    
    async def verificar_sessao(self, usar_cache: bool = True) -> Dict[str, Any]:
        """
        Verifica status da sess√£o usando autentica√ß√£o correta.
        
        Args:
            usar_cache: Se deve usar cache (para compatibilidade)
            
        Returns:
            Dict: Status da sess√£o WAHA
            
        Examples:
            >>> cliente = ClienteWaha()
            >>> status = await cliente.verificar_sessao()
            >>> print(status["conectado"])
            True ou False
        """
        try:
            url = f"{self.config.base_url}/api/sessions/{self.config.session_name}"
            
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    url, 
                    headers=self.headers,  # Headers com X-Api-Key correto
                    timeout=self.config.timeout
                )
            
            if response.status_code == 200:
                data = response.json()
                status = data.get("status", "UNKNOWN")
                
                resultado = {
                    "conectado": status == "WORKING",
                    "status": status,
                    "qr_code": (
                        data.get("qr", {}).get("value")
                        if status == "SCAN_QR_CODE"
                        else None
                    ),
                    "detalhes": data,
                    "timestamp": datetime.now().isoformat(),
                }
                
                logger.info(f"Sess√£o verificada: {status}")
                return resultado
                
            elif response.status_code == 404:
                return {
                    "conectado": False,
                    "status": "NOT_FOUND",
                    "mensagem": "Sess√£o n√£o encontrada",
                    "timestamp": datetime.now().isoformat(),
                }
            elif response.status_code == 401:
                logger.error("Erro 401: Falha na autentica√ß√£o WAHA")
                logger.error(f"API Key usada: {self.config.api_key[:8]}...")
                return {
                    "conectado": False,
                    "status": "AUTH_ERROR",
                    "mensagem": "Erro de autentica√ß√£o - verifique WAHA_API_KEY",
                    "timestamp": datetime.now().isoformat(),
                }
            else:
                return {
                    "conectado": False,
                    "status": "ERROR",
                    "mensagem": f"Erro HTTP {response.status_code}: {response.text}",
                    "timestamp": datetime.now().isoformat(),
                }
                
        except Exception as e:
            logger.error(f"Erro ao verificar sess√£o WAHA: {e}")
            return {
                "conectado": False,
                "status": "CONNECTION_ERROR",
                "mensagem": str(e),
                "timestamp": datetime.now().isoformat(),
            }
    
    async def enviar_mensagem(self, chat_id: str, texto: str, mencoes: Optional[list] = None) -> bool:
        """
        Envia mensagem usando autentica√ß√£o correta.
        
        Args:
            chat_id: ID do chat WhatsApp
            texto: Texto da mensagem
            mencoes: Lista de men√ß√µes (opcional)
            
        Returns:
            bool: True se enviada com sucesso
            
        Examples:
            >>> cliente = ClienteWaha()
            >>> sucesso = await cliente.enviar_mensagem("5511999999999@c.us", "Ol√°!")
            >>> print(sucesso)
            True
        """
        try:
            url = f"{self.config.base_url}/api/sendText"
            payload = {
                "session": self.config.session_name,
                "chatId": self._formatar_chat_id(chat_id),
                "text": texto,
            }
            
            if mencoes:
                payload["mentions"] = mencoes
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    url,
                    json=payload,
                    headers=self.headers,  # Headers com X-Api-Key correto
                    timeout=self.config.timeout
                )
            
            if response.status_code in [200, 201]:
                logger.info(f"Mensagem enviada para {chat_id}")
                return True
            else:
                logger.error(f"Falha ao enviar mensagem: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"Erro ao enviar mensagem: {e}")
            return False
    
    def _formatar_chat_id(self, chat_id: str) -> str:
        """
        Formata chat_id para padr√£o WhatsApp.
        
        Args:
            chat_id: ID do chat bruto
            
        Returns:
            str: Chat ID formatado
            
        Examples:
            >>> cliente = ClienteWaha()
            >>> formatted = cliente._formatar_chat_id("5511999999999")
            >>> print(formatted)
            "5511999999999@c.us"
        """
        if chat_id.endswith("@c.us") or chat_id.endswith("@g.us"):
            return chat_id
        
        # Se √© s√≥ n√∫mero, assumir contato pessoal
        if chat_id.replace("+", "").replace("-", "").isdigit():
            return f"{chat_id.replace('+', '').replace('-', '')}@c.us"
        
        return chat_id
    
    # ... outros m√©todos seguem o mesmo padr√£o corrigido ...

# Inst√¢ncia global corrigida
cliente_waha = ClienteWaha()

# ===== ARQUIVO 3: Script de Teste da Corre√ß√£o =====

async def testar_autenticacao_corrigida():
    """
    Script de teste para validar se a corre√ß√£o da autentica√ß√£o est√° funcionando.
    
    Este script testa:
    1. Gera√ß√£o correta da API key
    2. Configura√ß√£o adequada do container
    3. Requisi√ß√µes HTTP com autentica√ß√£o correta
    4. Cria√ß√£o de sess√£o WAHA
    
    Examples:
        >>> await testar_autenticacao_corrigida()
        # Executa todos os testes de autentica√ß√£o
    """
    print("üß™ TESTANDO CORRE√á√ÉO DA AUTENTICA√á√ÉO WAHA")
    print("=" * 50)
    
    # Teste 1: Configura√ß√£o da API key
    print("\n1. Testando configura√ß√£o da API key...")
    load_dotenv()
    api_key = os.getenv("WAHA_API_KEY")
    
    if api_key and not api_key.startswith("sha512:") and len(api_key) >= 16:
        print(f"‚úÖ API key v√°lida: {api_key[:8]}...")
    else:
        print("‚ùå API key inv√°lida - executando corre√ß√£o...")
        waha = GerenciadorWAHA()  # Isso ir√° corrigir automaticamente
        api_key = waha.api_key
        print(f"‚úÖ API key corrigida: {api_key[:8]}...")
    
    # Teste 2: Teste de autentica√ß√£o HTTP
    print("\n2. Testando autentica√ß√£o HTTP...")
    try:
        headers = {
            "Content-Type": "application/json",
            "X-Api-Key": api_key  # Plain text conforme documenta√ß√£o
        }
        
        response = requests.get("http://localhost:3000/api/sessions", headers=headers, timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Autentica√ß√£o HTTP funcionando")
            sessions = response.json()
            print(f"üìä Sess√µes encontradas: {len(sessions)}")
        elif response.status_code == 401:
            print("‚ùå Erro 401 - Falha na autentica√ß√£o")
            print(f"üîç API key testada: {api_key[:8]}...")
            print("üìö Verifique se o container WAHA foi iniciado com a mesma chave")
        else:
            print(f"‚ö†Ô∏è  Status inesperado: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è  WAHA n√£o est√° rodando - teste de autentica√ß√£o adiado")
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
    
    # Teste 3: Configura√ß√£o do cliente
    print("\n3. Testando cliente WAHA...")
    try:
        cliente = ClienteWaha()
        print(f"‚úÖ Cliente configurado com API key: {cliente.config.api_key[:8]}...")
        
        # Testar verifica√ß√£o de sess√£o
        status = await cliente.verificar_sessao()
        print(f"üì± Status da sess√£o: {status.get('status', 'UNKNOWN')}")
        
        if status.get("status") == "AUTH_ERROR":
            print("‚ùå Erro de autentica√ß√£o detectado")
            return False
        else:
            print("‚úÖ Cliente funcionando corretamente")
            
    except Exception as e:
        print(f"‚ùå Erro no cliente: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ TESTE DE CORRE√á√ÉO CONCLU√çDO")
    print("üìö Conforme documenta√ß√£o oficial WAHA:")
    print("   - Container: Plain text API key na vari√°vel WAHA_API_KEY") 
    print("   - HTTP: Plain text API key no header X-Api-Key")
    print("   - Formato: UUID sem h√≠fens (32 caracteres)")
    
    return True

# ===== ARQUIVO 4: .env corrigido =====

"""
# .env CORRIGIDO para WAHA
# Baseado na documenta√ß√£o oficial: https://waha.devlike.pro/docs/how-to/security/

# === WAHA Configuration (CORRIGIDO) ===
WAHA_BASE_URL=http://localhost:3000
WAHA_API_KEY=sua_api_key_plain_text_aqui_32_chars
# IMPORTANTE: Usar apenas plain text, SEM prefixo sha512:
# Exemplo: WAHA_API_KEY=a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6

# === Outras configura√ß√µes ===
WHATSAPP_SESSION_NAME=default
OLLAMA_BASE_URL=http://localhost:11434
LLM_MODEL=llama3.1
PORT=8000
HOST=0.0.0.0
DEBUG_MODE=True
LOG_LEVEL=INFO
LOG_DIR=logs

# === Webhook (preenchido automaticamente) ===
NGROK_URL=

# === Configura√ß√µes opcionais ===
BOT_TIMEOUT_MINUTES=30
MAX_CONTEXT_MESSAGES=10
"""

print("üìã RESUMO DA CORRE√á√ÉO:")
print("‚úÖ Removida complexidade desnecess√°ria de hash/plain text")
print("‚úÖ Container WAHA usa plain text API key")  
print("‚úÖ HTTP requests usam plain text API key")
print("‚úÖ Gera√ß√£o autom√°tica de API key no formato correto")
print("‚úÖ Headers X-Api-Key configurados corretamente")
print("‚úÖ Tratamento de erro 401 aprimorado")
print("‚úÖ Documenta√ß√£o oficial seguida rigorosamente")
print("\nüîß Para aplicar a corre√ß√£o:")
print("1. Substitua os arquivos pelos c√≥digos corrigidos")
print("2. Execute: python -c 'from gerenciador_sistema import testar_autenticacao_corrigida; import asyncio; asyncio.run(testar_autenticacao_corrigida())'")
print("3. Reinicie o sistema: python gerenciador_sistema.py")